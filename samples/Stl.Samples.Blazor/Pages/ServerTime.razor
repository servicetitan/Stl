@page "/serverTime"
@using Stl.Samples.Blazor.Services
@using System.Diagnostics
@implements IDisposable
@inject IReplicator Replicator
@inject ILogger<ServerTime> Log
@inject ITimeProviderClient TimeProviderClient

<h1>Timer</h1>

<p>Server Time: @TimeString</p>

<button class="btn btn-primary" @onclick="UpdateNow">Refresh</button>

@code {
    protected IComputed<DateTime> Time { get; set; }
    protected string TimeString => Time?.Value.ToString("HH:mm:ss.ffff") ?? "n/a";
    private IDisposable _autoUpdateHandler;

    protected override async Task OnInitializedAsync()
    {
        Debug.WriteLine($"{GetType().Name}: OnInitializedAsync");
        Time = await TimeProviderClient.GetTimeAsync(); 
        // ReSharper disable once HeapView.BoxingAllocation
        _autoUpdateHandler = Time.AutoUpdate(TimeSpan.FromSeconds(2), (c, o, _) => {
            Time = c;
            Log.LogInformation($"Update (auto): {TimeString}.");
            StateHasChanged();
        });
    }

    private async void UpdateNow()
    {
        GC.Collect(); // That's just for testing
        if (Time != null)
            Time = await Time.UpdateAsync();
        Log.LogInformation($"Update (manual): {TimeString}.");
    }

    public void Dispose()
    {
        Debug.WriteLine($"{GetType().Name}: Dispose");
        _autoUpdateHandler?.Dispose();
        (Time as IComputedReplica<DateTime>)?.Replica.DisposeAsync();
    }

}

@page "/serverTime"
@using System.Globalization
@inject HttpClient HttpClient
@inject IReplicator Replicator
@inject ILogger<ServerTime> Log

<h1>Timer</h1>

<p>Server Time: @Time</p>

<button class="btn btn-primary" @onclick="UpdateNow">Refresh</button>

@code {
    private IReplica<DateTime>? TimeReplica { get; set; }
    private string Time => 
        TimeReplica?.Computed.Value.ToString("HH:mm:ss.ffff") ?? "n/a";

    protected override async Task OnInitializedAsync()
    {
        // Temp. issue workaround: websocket connection should be established first.
        await Task.Delay(3000);

        var json = await HttpClient.GetStringAsync("api/time");
        Log.LogInformation($"Got JSON: {json}");
        var message = new JsonNetSerializer<PublicationPublishedMessage>().Deserialize(json);
        TimeReplica = Replicator.GetOrAdd<DateTime>(message.PublisherId, message.PublicationId);
        Log.LogInformation($"Trying to update replica...");
        await TimeReplica.RequestUpdateAsync();
        Log.LogInformation($"Replica updated.");
        TimeReplica.Computed.AutoUpdate(TimeSpan.FromSeconds(2), (c, o, _) => {
            Log.LogInformation($"Update (auto): {Time}.");
            StateHasChanged();
        });
    }

    private async void UpdateNow()
    {
        await (TimeReplica?.RequestUpdateAsync() ?? Task.CompletedTask);
        Log.LogInformation($"Update (manual): {Time}.");
        StateHasChanged();
    }
}
